# -*- coding: utf-8 -*-
import logging
import aiohttp
import json
import os
from dotenv import load_dotenv

# –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
DEPSEARCH_TOKEN = os.getenv("DEPSEARCH_TOKEN")


import asyncio
import re
import time
from datetime import date, datetime, timedelta
from typing import Dict, List, Tuple, Set
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile
)
from aiogram.enums import ParseMode
from collections import defaultdict
from aiogram.exceptions import TelegramForbiddenError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
API_TOKEN = os.getenv("API_TOKEN")
DEPSEARCH_TOKEN = os.getenv("DEPSEARCH_TOKEN")

ADMINS = [7409003051]
VIP_USERS = [968630098]

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
USER_DATA_FILE = os.path.join(BASE_DIR, "users.txt")
LOG_FILE = os.path.join(BASE_DIR, "bot.log")

CHANNEL_USERNAME = "@internetzuk"
CHANNEL_LINK = "https://t.me/internetzuk"
FLOOD_LIMIT = 1
REFERRAL_BONUS = 1
TEMP_FILES_DIR = os.path.join(BASE_DIR, "temp_files")
BOT_USERNAME = "@Internetzukbot"

os.makedirs(TEMP_FILES_DIR, exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM ---
class SearchState(StatesGroup):
    choosing_search_type = State()
    waiting_for_phone = State()
    waiting_for_email = State()
    waiting_for_nickname = State()
    waiting_for_social = State()
    waiting_for_vkid = State()
    waiting_for_vk_link = State()
    waiting_for_tgid = State()
    waiting_for_tg_link = State()
    waiting_for_okid = State()
    waiting_for_fcid = State()

class AdminState(StatesGroup):
    awaiting_broadcast_text = State()
    awaiting_vip_id = State()

# --- –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ ---
LIMITS = {
    "admin": float('inf'),
    "vip": 30,
    "default": 5
}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîé –ü–æ–∏—Å–∫"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],
        [KeyboardButton(text="ü§ñ –û –±–æ—Ç–µ"), KeyboardButton(text="üìà –ú–æ–π —Å—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞"), KeyboardButton(text="üíé –ö—É–ø–∏—Ç—å VIP —Å–æ —Å–∫–∏–¥–∫–æ–π")]
    ],
    resize_keyboard=True
)

search_inline_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üì± –ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="search_phone")],
        [InlineKeyboardButton(text="üìß –ü–æ email", callback_data="search_email")],
        [InlineKeyboardButton(text="üë§ –ü–æ –Ω–∏–∫—É", callback_data="search_nickname")],
        [InlineKeyboardButton(text="üåê –ü–æ —Å–æ—Ü—Å–µ—Ç—è–º", callback_data="search_social")],
    ]
)

social_inline_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–í–ö–æ–Ω—Ç–∞–∫—Ç–µ", callback_data="social_vk")],
        [InlineKeyboardButton(text="Telegram", callback_data="social_tg")],
        [InlineKeyboardButton(text="–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏", callback_data="social_ok")],
        [InlineKeyboardButton(text="Facebook", callback_data="social_fc")],
        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="back_to_search_type")]
    ]
)

vk_inline_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="VK ID", callback_data="social_vk_id")],
        [InlineKeyboardButton(text="VK –°—Å—ã–ª–∫–∞", callback_data="social_vk_link")],
        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="back_to_social")]
    ]
)

tg_inline_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="TG ID", callback_data="social_tg_id")],
        [InlineKeyboardButton(text="TG –°—Å—ã–ª–∫–∞", callback_data="social_tg_link")],
        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="back_to_social")]
    ]
)

ok_inline_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="OK ID", callback_data="social_ok_id")],
        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="back_to_social")]
    ]
)

fc_inline_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="FC ID", callback_data="social_fc_id")],
        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="back_to_social")]
    ]
)

admin_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üì£ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="‚ûï –í—ã–¥–∞—Ç—å VIP", callback_data="admin_add_vip")],
        [InlineKeyboardButton(text="üìÑ –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑—É", callback_data="admin_get_users")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
    ]
)

# --- –ö–µ—à –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞ ---
results_cache = {}
user_last_request = defaultdict(float)

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ---
def load_user_data() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    if os.path.exists(USER_DATA_FILE):
        try:
            with open(USER_DATA_FILE, "r", encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, FileNotFoundError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ user_data: {e}")
            return {}
    return {}

def save_user_data(data: Dict) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON —Ñ–∞–π–ª."""
    temp_file = USER_DATA_FILE + ".tmp"
    try:
        with open(temp_file, "w", encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        os.replace(temp_file, USER_DATA_FILE)
        logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")
        if os.path.exists(temp_file):
            os.remove(temp_file)

def get_current_date() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD."""
    return str(date.today())

def get_user_limit(user_id: int) -> int:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_data = load_user_data()
    is_vip = user_data.get(str(user_id), {}).get("is_vip", False) or user_id in VIP_USERS
    
    if user_id in ADMINS:
        return float('inf')
    elif is_vip:
        return LIMITS["vip"]
    return LIMITS["default"]

def initialize_user_data(user_id: int) -> dict:
    """–°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return {
        "search_count": 0,
        "last_search_date": get_current_date(),
        "is_admin": user_id in ADMINS,
        "is_vip": user_id in VIP_USERS,
        "subscribed": True,
        "queries": [],
        "referred_by": None,
        "referrals_count": 0,
    }

async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª."""
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id} –≤ {CHANNEL_USERNAME}: {e}")
        return False

async def require_subscription(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª."""
    subscribe_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
        ]
    )
    try:
        await message.answer(
            "‚ùóÔ∏è **–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!**\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=subscribe_kb,
            parse_mode=ParseMode.MARKDOWN
        )
    except TelegramForbiddenError:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")

async def notify_admin(text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    for admin_id in ADMINS:
        try:
            await bot.send_message(admin_id, f"(–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ): {text}")
        except TelegramForbiddenError:
            logger.warning(f"–ê–¥–º–∏–Ω {admin_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def detect_operator_info(phone: str) -> Dict[str, str]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ —Ä–µ–≥–∏–æ–Ω –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    phone = phone.strip().replace("+", "").replace(" ", "")
    ukr_data = {
        '039': {'operator': '–ö–∏–µ–≤—Å—Ç–∞—Ä', 'region': '–ó–∞–ø–∞–¥ (–õ—å–≤–æ–≤, –ò–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫–æ–≤—Å–∫)'}, '050': {'operator': 'Vodafone', 'region': '–¶–µ–Ω—Ç—Ä/–í–æ—Å—Ç–æ–∫ (–ö–∏–µ–≤, –•–∞—Ä—å–∫–æ–≤)'}, '063': {'operator': 'lifecell', 'region': '–Æ–≥ (–û–¥–µ—Å—Å–∞, –ù–∏–∫–æ–ª–∞–µ–≤)'}, '066': {'operator': 'Vodafone', 'region': '–î–Ω–µ–ø—Ä, –ó–∞–ø–æ—Ä–æ–∂—å–µ'}, '067': {'operator': '–ö–∏–µ–≤—Å—Ç–∞—Ä', 'region': '–°–µ–≤–µ—Ä (–ß–µ—Ä–Ω–∏–≥–æ–≤, –°—É–º—ã)'}, '068': {'operator': '–ö–∏–µ–≤—Å—Ç–∞—Ä', 'region': '–¶–µ–Ω—Ç—Ä (–ö–∏–µ–≤, –í–∏–Ω–Ω–∏—Ü–∞)'}, '073': {'operator': 'lifecell', 'region': '–¶–µ–Ω—Ç—Ä (–ü–æ–ª—Ç–∞–≤–∞, –ß–µ—Ä–∫–∞—Å—Å—ã)'}, '091': {'operator': 'TriMob', 'region': '–ö—Ä—ã–º*'}, '092': {'operator': 'PEOPLEnet', 'region': '–ö–∏–µ–≤, –û–¥–µ—Å—Å–∞'}, '093': {'operator': 'lifecell', 'region': '–í–æ—Å—Ç–æ–∫ (–î–æ–Ω–µ—Ü–∫, –õ—É–≥–∞–Ω—Å–∫)*'}, '094': {'operator': '–Ü–Ω—Ç–µ—Ä—Ç–µ–ª–µ–∫–æ–º', 'region': '–Æ–≥ (–•–µ—Ä—Å–æ–Ω)'}, '095': {'operator': 'Vodafone', 'region': '–ö—Ä—ã–º*'}, '096': {'operator': '–ö–∏–µ–≤—Å—Ç–∞—Ä', 'region': '–¶–µ–Ω—Ç—Ä (–ö–∏–µ–≤, –ñ–∏—Ç–æ–º–∏—Ä)'}, '097': {'operator': '–ö–∏–µ–≤—Å—Ç–∞—Ä', 'region': '–í–æ—Å—Ç–æ–∫ (–î–Ω–µ–ø—Ä, –ö—Ä–∏–≤–æ–π –†–æ–≥)'}, '098': {'operator': '–ö–∏–µ–≤—Å—Ç–∞—Ä', 'region': '–ó–∞–ø–∞–¥ (–¢–µ—Ä–Ω–æ–ø–æ–ª—å, –†–æ–≤–Ω–æ)'}, '099': {'operator': 'Vodafone', 'region': '–°–µ–≤–µ—Ä (–ß–µ—Ä–Ω–∏–≥–æ–≤, –°—É–º—ã)'},
    }
    ru_data = {
        '900': {'operator': 'Tele2', 'region': '–ú–æ—Å–∫–≤–∞, –°–ü–±'}, '901': {'operator': '–ú–¢–°', 'region': '–ú–æ—Å–∫–≤–∞'}, '902': {'operator': '–ú–¢–°', 'region': '–î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫'}, '903': {'operator': '–ú–¢–°', 'region': '–°–∏–±–∏—Ä—å'}, '904': {'operator': '–ú–¢–°', 'region': '–£—Ä–∞–ª'}, '905': {'operator': '–ú–¢–°', 'region': '–¶–µ–Ω—Ç—Ä'}, '906': {'operator': '–ú–¢–°', 'region': '–ü–æ–≤–æ–ª–∂—å–µ'}, '908': {'operator': '–ú–¢–°', 'region': '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥'}, '909': {'operator': '–ú–¢–°', 'region': '–Æ–≥'}, '910': {'operator': '–ú–¢–°', 'region': '–¶–µ–Ω—Ç—Ä'}, '911': {'operator': '–ú–¢–°', 'region': '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥'}, '912': {'operator': '–ú–¢–°', 'region': '–£—Ä–∞–ª'}, '913': {'operator': '–ú–¢–°', 'region': '–°–∏–±–∏—Ä—å'}, '914': {'operator': '–ú–¢–°', 'region': '–î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫'}, '915': {'operator': '–ú–¢–°', 'region': '–¶–µ–Ω—Ç—Ä'}, '916': {'operator': '–ú–¢–°', 'region': '–¶–µ–Ω—Ç—Ä'}, '917': {'operator': '–ú–¢–°', 'region': '–ü–æ–≤–æ–ª–∂—å–µ'}, '918': {'operator': '–ú–¢–°', 'region': '–Æ–≥'}, '919': {'operator': '–ú–¢–°', 'region': '–¶–µ–Ω—Ç—Ä'}, '920': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–ú–æ—Å–∫–≤–∞'}, '921': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–°–ü–±'}, '922': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–£—Ä–∞–ª'}, '923': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–°–∏–±–∏—Ä—å'}, '924': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫'}, '925': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–¶–µ–Ω—Ç—Ä'}, '926': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–ú–æ—Å–∫–≤–∞'}, '927': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–ü–æ–≤–æ–ª–∂—å–µ'}, '928': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–Æ–≥'}, '929': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–¶–µ–Ω—Ç—Ä'}, '930': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–¶–µ–Ω—Ç—Ä'}, '931': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥'}, '932': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–°–∏–±–∏—Ä—å'}, '933': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫'}, '934': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–°–µ–≤–µ—Ä–Ω—ã–π –ö–∞–≤–∫–∞–∑'}, '936': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–¶–µ–Ω—Ç—Ä'}, '937': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–ü–æ–≤–æ–ª–∂—å–µ'}, '938': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥'}, '939': {'operator': '–ú–µ–≥–∞—Ñ–æ–Ω', 'region': '–Æ–≥'}, '950': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–ú–æ—Å–∫–≤–∞'}, '951': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–ü–æ–≤–æ–ª–∂—å–µ'}, '952': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥'}, '953': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–°–∏–±–∏—Ä—å'}, '954': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫'}, '955': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–¶–µ–Ω—Ç—Ä'}, '956': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–£—Ä–∞–ª'}, '958': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–¶–µ–Ω—Ç—Ä'}, '960': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–ú–æ—Å–∫–≤–∞'}, '961': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–Æ–≥'}, '962': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–¶–µ–Ω—Ç—Ä'}, '963': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–°–∏–±–∏—Ä—å'}, '964': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫'}, '965': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–¶–µ–Ω—Ç—Ä'}, '966': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–ú–æ—Å–∫–≤–∞'}, '967': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–ü–æ–≤–æ–ª–∂—å–µ'}, '968': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥'}, '969': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–ú–æ—Å–∫–≤–∞'}, '970': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–ú–æ—Å–∫–≤–∞'}, '971': {'operator': '–ë–∏–ª–∞–π–Ω', 'region': '–°–ü–±'}, '980': {'operator': '–ú–¢–°', 'region': '–ú–æ—Å–∫–≤–∞'}, '981': {'operator': '–ú–¢–°', 'region': '–°–ü–±'}, '982': {'operator': '–ú–¢–°', 'region': '–¶–µ–Ω—Ç—Ä'}, '983': {'operator': '–ú–¢–°', 'region': '–°–∏–±–∏—Ä—å'}, '984': {'operator': '–ú–¢–°', 'region': '–î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫'}, '985': {'operator': '–ú–¢–°', 'region': '–¶–µ–Ω—Ç—Ä'}, '986': {'operator': '–ú–¢–°', 'region': '–ü–æ–≤–æ–ª–∂—å–µ'}, '987': {'operator': '–ú–¢–°', 'region': '–£—Ä–∞–ª'}, '988': {'operator': '–ú–¢–°', 'region': '–Æ–≥'}, '989': {'operator': '–ú–¢–°', 'region': '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥'},
    }
    if phone.startswith('380') and len(phone) == 12:
        code = phone[3:5]
        return ukr_data.get(code, {'operator': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'region': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})
    elif phone.startswith('7') and len(phone) == 11:
        code = phone[1:4]
        return ru_data.get(code, {'operator': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'region': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})
    return {'operator': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'region': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}


def split_message(text: str, chunk_size: int = 4000) -> List[str]:
    if len(text) <= chunk_size:
        return [text]
    parts = []
    current_chunk = ""
    lines = text.split('\n')
    for line in lines:
        if len(current_chunk) + len(line) + 1 > chunk_size:
            parts.append(current_chunk)
            current_chunk = line
        else:
            current_chunk += "\n" + line if current_chunk else line
    if current_chunk:
        parts.append(current_chunk)
    return parts

async def generate_html_report(query_type: str, query_value: str, data: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-–æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    results = data.get('results', [])

    # –ë–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ, —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    operator_info_html = ""
    if query_type == "phone":
        op_info = await detect_operator_info(query_value)
        operator_info_html = f"""
    <div class="section-title">–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –û–ü–ï–†–ê–¢–û–†–ï</div>
    <div class="info-block">
        <div class="info-item">
            <strong>–û–ü–ï–†–ê–¢–û–†:</strong>
            <span>{op_info['operator']}</span>
        </div>
        <div class="info-item">
            <strong>–†–ï–ì–ò–û–ù:</strong>
            <span>{op_info['region']}</span>
        </div>
    </div>
        """

    # –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
    records_html = []
    for i, record in enumerate(results):
        record_items = []
        for key, value in record.items():
            if key in ["data", "source", "database"]:
                continue
            
            display_key = key.replace('_', ' ').capitalize().upper()
            
            display_value = ""
            if isinstance(value, list):
                display_value = ", ".join(str(item) for item in value)
            elif isinstance(value, dict):
                nested_items = [f"<strong>{sub_key.replace('_', ' ').capitalize().upper()}:</strong> {sub_value}" for sub_key, sub_value in value.items()]
                display_value = "<br>".join(nested_items)
            else:
                display_value = str(value)
            
            record_items.append(f"<li><strong>{display_key}:</strong> {display_value}</li>")
        
        sources_list = []
        if record.get('data'): sources_list.append(f"<code>{record['data']}</code>")
        if record.get('source'): sources_list.append(f"<code>{record['source']}</code>")
        if record.get('database'): sources_list.append(f"<code>{record['database']}</code>")
        if sources_list:
            record_items.append(f"<li><strong>–ò–°–¢–û–ß–ù–ò–ö:</strong> {', '.join(sources_list)}</li>")

        records_html.append(f"""
    <div class="record-card">
        <div class="record-header">
            <h4>–ó–ê–ü–ò–°–¨ #{i + 1}</h4>
            <div class="toggle-icon">‚ñº</div>
        </div>
        <div class="record-details">
            <ul>
                {"".join(record_items)}
            </ul>
        </div>
    </div>
""")

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å HTML-–æ—Ç—á–µ—Ç
    final_html = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û–¢–ß–ï–¢ INTERNET –ñ–£–ö</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600&display=swap');
        
        body {{
            background-color: #0a0a0a;
            font-family: 'Montserrat', sans-serif;
            color: #dcdcdc;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            overflow-x: hidden;
        }}

        /* –ê–Ω–∏–º–∞—Ü–∏—è "–ñ—É—á–∫–æ–≤" */
        @keyframes move {{
            0% {{ transform: translate(0, 0); opacity: 0; }}
            10% {{ opacity: 0.1; }}
            50% {{ opacity: 0.2; }}
            100% {{ transform: translate(calc(var(--x) * 1px), calc(var(--y) * 1px)); opacity: 0; }}
        }}

        .bug {{
            position: fixed;
            background-color: rgba(255, 255, 255, 0.5);
            border-radius: 50%;
            pointer-events: none;
            width: 2px;
            height: 2px;
            animation: move linear infinite;
        }}

        .report-container {{
            max-width: 900px;
            margin: 40px auto;
            background: rgba(18, 18, 18, 0.95);
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.4);
            padding: 40px;
            position: relative;
            z-index: 10;
        }}

        header {{
            text-align: center;
            border-bottom: 2px solid #2a2a2a;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }}

        header h1 {{
            font-size: 2.5rem;
            color: #f5f5f5;
            margin: 0;
        }}

        .section-title {{
            font-size: 1.5rem;
            font-weight: 600;
            color: #dcdcdc;
            margin-top: 40px;
            padding-bottom: 10px;
            border-bottom: 1px solid #2a2a2a;
            transition: color 0.3s ease;
        }}
        
        .section-title:hover {{
            color: #fff;
        }}

        .info-block {{
            background-color: #1a1a1a;
            border-left: 5px solid #444;
            padding: 20px;
            margin-bottom: 25px;
            border-radius: 8px;
        }}

        .info-item {{
            margin-bottom: 10px;
        }}

        .info-item strong {{
            display: block;
            color: #fff;
            font-weight: 600;
        }}

        .info-item span {{
            color: #ccc;
            font-size: 0.95rem;
        }}

        .record-card {{
            background-color: #1a1a1a;
            border: 1px solid #2a2a2a;
            border-radius: 8px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            cursor: pointer;
            transition: all 0.3s ease;
        }}

        .record-card:hover {{
            background-color: #222;
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.3);
        }}
        
        .record-header {{
            display: flex;
            justify-content: space-between;
            align-items: center;
        }}
        
        .record-header h4 {{
            font-size: 1.2rem;
            color: #dcdcdc;
            margin: 0;
            padding-bottom: 10px;
            border-bottom: 1px solid #2a2a2a;
            flex-grow: 1;
            transition: color 0.3s ease;
        }}
        
        .record-card:hover .record-header h4 {{
            color: #fff;
        }}
        
        .toggle-icon {{
            font-size: 1.2rem;
            transform: rotate(0deg);
            transition: transform 0.3s ease;
        }}
        
        .record-card.active .toggle-icon {{
            transform: rotate(-180deg);
        }}

        .record-details {{
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.5s ease-out, padding 0.5s ease-out;
            padding-top: 0;
        }}
        
        .record-card.active .record-details {{
            max-height: 1000px; /* –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ */
            padding-top: 15px;
        }}

        .record-details ul {{
            list-style-type: none;
            padding: 0;
            margin: 0;
        }}

        .record-details li {{
            background-color: #2a2a2a;
            margin-bottom: 8px;
            padding: 10px;
            border-radius: 4px;
            transition: background-color 0.3s ease;
        }}
        
        .record-details li:hover {{
            background-color: #333;
        }}

        .footer {{
            text-align: center;
            margin-top: 50px;
            padding-top: 20px;
            border-top: 1px solid #2a2a2a;
            font-size: 0.8rem;
            color: #aaa;
        }}
    </style>
</head>
<body>

<div class="report-container">
    <header>
        <h1>–û–¢–ß–ï–¢ INTERNET –ñ–£–ö</h1>
    </header>
    
    <div class="info-block">
        <div class="info-item">
            <strong>–¢–ò–ü –ó–ê–ü–†–û–°–ê:</strong>
            <span>{query_type.capitalize()}</span>
        </div>
        <div class="info-item">
            <strong>–ó–ù–ê–ß–ï–ù–ò–ï –ó–ê–ü–†–û–°–ê:</strong>
            <span>{query_value}</span>
        </div>
        <div class="info-item">
            <strong>–û–ë–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ó–ê–ü–ò–°–ï–ô:</strong>
            <span>{len(results)}</span>
        </div>
    </div>
    
    {operator_info_html}

    <div class="section-title">–î–ï–¢–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´</div>
    
    {"".join(records_html)}

</div>

<footer class="footer">
    <p>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –±–æ—Ç–æ–º @INTERNETZUK</p>
    <p>–û—Ç—á–µ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.</p>
</footer>

<script>
    document.addEventListener('DOMContentLoaded', () => {{
        const recordCards = document.querySelectorAll('.record-card');
        recordCards.forEach(card => {{
            const header = card.querySelector('.record-header');
            header.addEventListener('click', () => {{
                card.classList.toggle('active');
            }});
        }});
        
        // –°–æ–∑–¥–∞–Ω–∏–µ "–∂—É—á–∫–æ–≤"
        function createBugs() {{
            for (let i = 0; i < 50; i++) {{
                const bug = document.createElement('div');
                bug.classList.add('bug');
                document.body.appendChild(bug);
                
                const size = Math.random() * 3 + 1;
                bug.style.width = size + 'px';
                bug.style.height = size + 'px';
                bug.style.top = Math.random() * 100 + 'vh';
                bug.style.left = Math.random() * 100 + 'vw';
                
                const duration = Math.random() * 15 + 10;
                bug.style.animationDuration = duration + 's';
                
                const x_offset = (Math.random() - 0.5) * 500;
                const y_offset = (Math.random() - 0.5) * 500;
                
                bug.style.setProperty('--x', x_offset);
                bug.style.setProperty('--y', y_offset);
                bug.style.animationDelay = -Math.random() * duration + 's';
            }}
        }}
        createBugs();
    }});
</script>

</body>
</html>
"""

    return final_html

async def format_depsearch_results(query_type: str, query_value: str, data: dict, user_id: int) -> Tuple[str, InlineKeyboardMarkup]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞, –æ–±—ä–µ–¥–∏–Ω—è—è –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –≥—Ä—É–ø–ø–∏—Ä—É—è –¥–∞–Ω–Ω—ã–µ,
    —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º.
    """
    results = data.get('results', [])

    # 1. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    consolidated_data = defaultdict(set)
    for item in results:
        for key, value in item.items():
            if value and not (isinstance(value, (str, list)) and not value):
                key_lower = key.lower().replace(' ', '_').replace('-', '_')
                
                if '—Ñ–∏–æ' in key_lower or 'fullname' in key_lower or '–∏–º—è' in key_lower or 'name' in key_lower:
                    consolidated_data['–§–ò–û'].add(str(value))
                elif '–∏–Ω–Ω' in key_lower:
                    consolidated_data['–ò–ù–ù'].add(str(value))
                elif '—Ç–µ–ª–µ—Ñ–æ–Ω' in key_lower or 'phone' in key_lower or 'number' in key_lower:
                    if isinstance(value, list):
                        for sub_item in value:
                            consolidated_data['–¢–µ–ª–µ—Ñ–æ–Ω'].add(str(sub_item))
                    else:
                        consolidated_data['–¢–µ–ª–µ—Ñ–æ–Ω'].add(str(value))
                elif '–ø–æ—á—Ç–∞' in key_lower or 'email' in key_lower or 'mail' in key_lower:
                    if isinstance(value, list):
                        for sub_item in value:
                            consolidated_data['–ü–æ—á—Ç–∞'].add(str(sub_item))
                    else:
                        consolidated_data['–ü–æ—á—Ç–∞'].add(str(value))
                elif key_lower in ["data", "source", "database"]:
                    continue
                else:
                    if isinstance(value, list):
                        for sub_item in value:
                            consolidated_data[key_lower].add(str(sub_item))
                    elif isinstance(value, dict):
                        for sub_key, sub_value in value.items():
                            if sub_value:
                                consolidated_data[key_lower].add(f"{sub_key}: {sub_value}")
                    else:
                        consolidated_data[key_lower].add(str(value))

    display_query_type = query_type
    if query_type.startswith("vkid"): display_query_type = "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ (ID)"
    elif query_type.startswith("vk.com"): display_query_type = "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ (—Å—Å—ã–ª–∫–∞)"
    elif query_type.startswith("tgid"): display_query_type = "Telegram (ID)"
    elif query_type.startswith("t.me"): display_query_type = "Telegram (—Å—Å—ã–ª–∫–∞)"
    elif query_type.startswith("okid"): display_query_type = "–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ (ID)"
    elif query_type.startswith("fcid"): display_query_type = "Facebook (ID)"
    elif query_type == "phone": display_query_type = "–Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    elif query_type == "email": display_query_type = "email"
    elif query_type == "nickname": display_query_type = "–Ω–∏–∫—É"

    response_lines = [
        f"üîé **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ {display_query_type}**: `{query_value}`",
        f"üìä **–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π**: `{len(results)}`"
    ]
    
    if query_type == "phone":
        operator_info = await detect_operator_info(query_value)
        response_lines.append(f"üì° **–û–ø–µ—Ä–∞—Ç–æ—Ä**: `{operator_info['operator']}`")
        response_lines.append(f"üåç **–†–µ–≥–∏–æ–Ω**: `{operator_info['region']}`")
    
    response_lines.append("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –°–≤–æ–¥–∫–∞ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    
    has_summary_data = False
    
    # –ö–ª—é—á–∏ –¥–ª—è —Å–≤–æ–¥–∫–∏, –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    summary_keys = ['–§–ò–û', '–ò–ù–ù', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ü–æ—á—Ç–∞']
    
    for key in summary_keys:
        values = sorted(list(set(v for v in consolidated_data.get(key, set()) if v and v.lower() != 'null' and v.strip())))
        if values:
            response_lines.append(f"**{key}**: `{', '.join(values)}`")
            has_summary_data = True
    
    if not has_summary_data:
        response_lines.append("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤–æ–¥–∫–∏.")
    
    response_lines.append("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    
    cache_key = f"{user_id}_{int(time.time())}"
    results_cache[cache_key] = {
        "data": data,
        "query_type": query_type,
        "query_value": query_value,
        "expires": datetime.now() + timedelta(hours=1)
    }
    inline_buttons = []
    if data.get('results'):
        inline_buttons.append([InlineKeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç (HTML)", callback_data=f"full_report|{cache_key}")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=inline_buttons)
    
    final_response = [line for line in response_lines if line and line.strip()]
    return "\n".join(final_response), kb

async def handle_nickname_search(message: Message, nickname: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –Ω–∏–∫—É, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–æ—Ü—Å–µ—Ç–∏.
    """
    sites = {
        "Instagram": "https://instagram.com/{}",
        "Telegram": "https://t.me/{}",
        "TikTok": "https://tiktok.com/@{}",
        "Facebook": "https://facebook.com/{}",
        "X (Twitter)": "https://x.com/{}",
        "VK": "https://vk.com/{}",
        "GitHub": "https://github.com/{}",
        "Reddit": "https://www.reddit.com/user/{}",
        "YouTube": "https://www.youtube.com/@{}",
        "Steam": "https://steamcommunity.com/id/{}"
    }
    response_lines = [f"üåê **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –Ω–∏–∫–∞**: `{nickname}`\n"]
    for name, url_template in sites.items():
        link = url_template.format(nickname)
        response_lines.append(f" ‚Ä¢ <a href='{link}'>{name}</a>")
    for part in split_message("\n".join(response_lines), 4000):
        await message.answer(part, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ –∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(CommandStart())
async def start_handler(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} ({message.from_user.full_name})")
    user_id = message.from_user.id
    user_data = load_user_data()
    referral_id = None
    if message.text and message.text.startswith('/start ref_'):
        try:
            referral_id = int(message.text.split('_')[1])
            if referral_id != user_id:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç {referral_id}")
        except (IndexError, ValueError):
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if str(user_id) not in user_data:
        user_data[str(user_id)] = initialize_user_data(user_id)
        if referral_id and str(referral_id) in user_data:
            user_data[str(user_id)]["referred_by"] = referral_id
            user_data[str(referral_id)]["referrals_count"] += 1
            user_data[str(referral_id)]["search_count"] -= REFERRAL_BONUS
            if user_data[str(referral_id)]["search_count"] < 0:
                user_data[str(referral_id)]["search_count"] = 0
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referral_id} –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ {user_id}")
            try:
                await bot.send_message(referral_id, f"üéâ **–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!**\n"
                                                  f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 1 –±–æ–Ω—É—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å!",
                                        parse_mode=ParseMode.MARKDOWN)
            except TelegramForbiddenError:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referral_id}, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        save_user_data(user_data)
        logger.info(f"–°–æ–∑–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
    await message.answer(
        f"üëã **–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!**\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º: Depsearch. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏:",
        reply_markup=main_kb,
        parse_mode=ParseMode.MARKDOWN
    )

@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'."""
    user_id = message.from_user.id
    user_data = load_user_data()
    
    is_vip = user_id in VIP_USERS or user_data.get(str(user_id), {}).get("is_vip", False)
    
    help_text = (
        "ü§ñ **–Ø ‚Äî Internet –ñ—É–∫**, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö.\n\n"
        "**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?**\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É `üîé –ü–æ–∏—Å–∫`.\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ (–ø–æ –Ω–æ–º–µ—Ä—É, email –∏ —Ç.–¥.).\n"
        "3. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n"
        "**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n"
        f" ‚Ä¢ –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: `{LIMITS['default']}` –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å.\n"
        f" ‚Ä¢ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: `{LIMITS['vip']}` –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å.\n"
        f" ‚Ä¢ –ê–¥–º–∏–Ω—ã: –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ.\n\n"
        f"**–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å VIP?**\n"
        f" ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É `üíé –ö—É–ø–∏—Ç—å VIP —Å–æ —Å–∫–∏–¥–∫–æ–π`."
    )
    
    await message.answer(help_text, reply_markup=main_kb, parse_mode=ParseMode.MARKDOWN)

@dp.message(F.text == "üîé –ü–æ–∏—Å–∫")
async def search_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∏—Å–∫'."""
    user_id = message.from_user.id
    user_data = load_user_data()
    
    is_subscribed = await check_subscription(user_id)
    if not is_subscribed:
        await require_subscription(message)
        return
        
    current_date = get_current_date()
    if user_data.get(str(user_id), {}).get("last_search_date") != current_date:
        user_data.setdefault(str(user_id), initialize_user_data(user_id))
        user_data[str(user_id)]["last_search_date"] = current_date
        user_data[str(user_id)]["search_count"] = 0
        save_user_data(user_data)

    current_count = user_data.get(str(user_id), {}).get("search_count", 0)
    limit = get_user_limit(user_id)
    
    if current_count >= limit:
        await message.answer(
            "üö´ **–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!**\n\n"
            f"–í–∞—à –ª–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: `{limit}`.\n"
            "–ß—Ç–æ–±—ã —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –ø–æ–ª—É—á–∏—Ç–µ VIP-—Å—Ç–∞—Ç—É—Å.",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", reply_markup=search_inline_kb)
    await state.set_state(SearchState.choosing_search_type)

@dp.message(F.text == "üìà –ú–æ–π —Å—Ç–∞—Ç—É—Å")
async def status_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–π —Å—Ç–∞—Ç—É—Å'."""
    user_id = message.from_user.id
    user_data = load_user_data()
    
    user_info = user_data.get(str(user_id), initialize_user_data(user_id))
    
    is_vip = user_id in VIP_USERS or user_info.get("is_vip", False)
    is_admin = user_id in ADMINS
    
    limit = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ" if is_admin else LIMITS['vip'] if is_vip else LIMITS['default']
    
    status_text = (
        f"üë§ **–í–∞—à —Å—Ç–∞—Ç—É—Å:**\n\n"
        f" ‚Ä¢ ID: `{user_id}`\n"
        f" ‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üëë –ê–¥–º–∏–Ω' if is_admin else 'üíé VIP' if is_vip else 'üë• –û–±—ã—á–Ω—ã–π'}\n"
        f" ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: `{user_info.get('search_count', 0)}` / `{limit}`\n"
        f" ‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π: `{user_info.get('referrals_count', 0)}`"
    )
    
    await message.answer(status_text, parse_mode=ParseMode.MARKDOWN)

@dp.message(F.text == "ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")
async def invite_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞'."""
    user_id = message.from_user.id
    referral_link = f"https://t.me/{BOT_USERNAME}?start=ref_{user_id}"
    
    await message.answer(
        "üöÄ **–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å!**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É. –ö–æ–≥–¥–∞ –æ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ `1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å`.\n\n"
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`{referral_link}`",
        parse_mode=ParseMode.MARKDOWN
    )

@dp.message(F.text == "üíé –ö—É–ø–∏—Ç—å VIP —Å–æ —Å–∫–∏–¥–∫–æ–π")
@dp.callback_query(F.data == "buy_vip_discount")
async def buy_vip_discount_handler(data_obj: types.Message | types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö—É–ø–∏—Ç—å VIP —Å–æ —Å–∫–∏–¥–∫–æ–π' –∏ –∫–æ–ª–±—ç–∫–∞.
    """
    user_id = data_obj.from_user.id
    
    vip_text = (
        "üíé **–ü–æ–ª—É—á–∏—Ç–µ VIP-—Å—Ç–∞—Ç—É—Å –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ!**\n\n"
        "**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ VIP:**\n"
        f" ‚Ä¢ `{LIMITS['vip']}` –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å.\n"
        " ‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.\n"
        " ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞.\n"
        " ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞—Ç—å –ø–æ–ª–Ω—ã–µ HTML-–æ—Ç—á–µ—Ç—ã.\n\n"
        "**–î–ª—è –ø–æ–∫—É–ø–∫–∏ VIP —Å–æ —Å–∫–∏–¥–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ:**\n"
        f"[—Å—é–¥–∞](https://t.me/devilosint)"
    )
    
    if isinstance(data_obj, types.Message):
        await data_obj.answer(vip_text, parse_mode=ParseMode.MARKDOWN)
    elif isinstance(data_obj, types.CallbackQuery):
        await data_obj.message.answer(vip_text, parse_mode=ParseMode.MARKDOWN)
        await data_obj.answer()

@dp.message(F.text == "ü§ñ –û –±–æ—Ç–µ")
async def about_bot_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –±–æ—Ç–µ'."""
    about_text = (
        "**Internet –ñ—É–∫** - —ç—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—é–¥—è—Ö "
        "–ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º. –≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Ç–µ–∫—à–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, "
        "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, –ø—É–±–ª–∏—á–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä—ã –∏ —Ç.–¥. "
        "–ù–∞—à–∞ —Ü–µ–ª—å - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—É–±–ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ "
        "–¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö."
    )
    
    await message.answer(about_text, parse_mode=ParseMode.MARKDOWN)

@dp.message(Command("admin"))
async def admin_panel_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin."""
    user_id = message.from_user.id
    if user_id in ADMINS:
        user_data = load_user_data()
        user_count = len(user_data)
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
                             f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{user_count}**",
                             reply_markup=admin_kb, parse_mode=ParseMode.MARKDOWN)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.")

@dp.callback_query(F.data.in_(["admin_close"]))
async def close_admin_panel(callback: types.CallbackQuery):
    if callback.from_user.id in ADMINS:
        await callback.message.edit_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞.", reply_markup=None)
    await callback.answer()

@dp.callback_query(F.data.in_(["admin_broadcast"]))
async def start_broadcast(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id in ADMINS:
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        await state.set_state(AdminState.awaiting_broadcast_text)
    await callback.answer()

@dp.message(AdminState.awaiting_broadcast_text)
async def send_broadcast(message: Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
        user_data = load_user_data()
        count = 0
        for user_id_str in user_data:
            user_id = int(user_id_str)
            try:
                await bot.send_message(user_id, message.text)
                count += 1
            except TelegramForbiddenError:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –£–¥–∞–ª—è—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
                user_data[user_id_str]["subscribed"] = False
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
        save_user_data(user_data)
        await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=main_kb)
        await state.clear()
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@dp.callback_query(F.data.in_(["admin_add_vip"]))
async def start_add_vip(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id in ADMINS:
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å VIP-—Å—Ç–∞—Ç—É—Å:")
        await state.set_state(AdminState.awaiting_vip_id)
    await callback.answer()

@dp.message(AdminState.awaiting_vip_id)
async def add_vip_user(message: Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        try:
            vip_id = int(message.text)
            user_data = load_user_data()
            if str(vip_id) not in user_data:
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {vip_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            else:
                user_data[str(vip_id)]["is_vip"] = True
                save_user_data(user_data)
                VIP_USERS.append(vip_id)
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {vip_id} –≤—ã–¥–∞–Ω VIP-—Å—Ç–∞—Ç—É—Å.", reply_markup=main_kb)
                await bot.send_message(vip_id, "üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –í–∞–º –≤—ã–¥–∞–Ω VIP-—Å—Ç–∞—Ç—É—Å.", parse_mode=ParseMode.MARKDOWN)
                await state.clear()
        except ValueError:
            await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ VIP: {e}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@dp.callback_query(F.data.in_(["admin_get_users"]))
async def get_user_db(callback: types.CallbackQuery):
    if callback.from_user.id in ADMINS:
        try:
            user_db_path = os.path.join(BASE_DIR, "users.txt")
            if os.path.exists(user_db_path):
                file = FSInputFile(user_db_path, filename="users.txt")
                await bot.send_document(callback.from_user.id, file, caption="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            else:
                await bot.send_message(callback.from_user.id, "–§–∞–π–ª —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await bot.send_message(callback.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
    await callback.answer()

@dp.callback_query(F.data.in_([
    "search_phone", "search_email", "search_nickname", "search_social",
    "social_vk", "social_tg", "social_ok", "social_fc",
    "social_vk_id", "social_vk_link", "social_tg_id", "social_tg_link", "social_ok_id", "social_fc_id",
    "back_to_search_type", "back_to_social"
]))
async def search_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_data = load_user_data()
    
    is_subscribed = await check_subscription(user_id)
    if not is_subscribed:
        await require_subscription(callback.message)
        await callback.answer()
        return

    current_count = user_data.get(str(user_id), {}).get("search_count", 0)
    limit = get_user_limit(user_id)

    if current_count >= limit:
        await callback.message.answer(
            "üö´ **–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!**\n\n"
            f"–í–∞—à –ª–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: `{limit}`.\n"
            "–ß—Ç–æ–±—ã —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –ø–æ–ª—É—á–∏—Ç–µ VIP-—Å—Ç–∞—Ç—É—Å.",
            parse_mode=ParseMode.MARKDOWN
        )
        await callback.answer()
        return

    action = callback.data
    response_text = ""
    reply_markup = None
    state_to_set = None

    if action == "back_to_search_type":
        response_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:"
        reply_markup = search_inline_kb
        state_to_set = SearchState.choosing_search_type
    elif action == "back_to_social":
        response_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å:"
        reply_markup = social_inline_kb
        state_to_set = SearchState.waiting_for_social
    elif action == "search_phone":
        response_text = "üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `79991234567`):"
        state_to_set = SearchState.waiting_for_phone
    elif action == "search_email":
        response_text = "üìß –û—Ç–ø—Ä–∞–≤—å—Ç–µ email –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        state_to_set = SearchState.waiting_for_email
    elif action == "search_nickname":
        response_text = "üë§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        state_to_set = SearchState.waiting_for_nickname
    elif action == "search_social":
        response_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        reply_markup = social_inline_kb
        state_to_set = SearchState.waiting_for_social
    elif action == "social_vk":
        response_text = "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—É–¥–µ—Ç–µ –∏—Å–∫–∞—Ç—å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ:"
        reply_markup = vk_inline_kb
    elif action == "social_tg":
        response_text = "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—É–¥–µ—Ç–µ –∏—Å–∫–∞—Ç—å –≤ Telegram:"
        reply_markup = tg_inline_kb
    elif action == "social_ok":
        response_text = "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—É–¥–µ—Ç–µ –∏—Å–∫–∞—Ç—å –≤ –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞—Ö:"
        reply_markup = ok_inline_kb
    elif action == "social_fc":
        response_text = "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—É–¥–µ—Ç–µ –∏—Å–∫–∞—Ç—å –≤ Facebook:"
        reply_markup = fc_inline_kb
    elif action == "social_vk_id":
        response_text = "–í–≤–µ–¥–∏—Ç–µ VK ID:"
        state_to_set = SearchState.waiting_for_vkid
    elif action == "social_vk_link":
        response_text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å VK:"
        state_to_set = SearchState.waiting_for_vk_link
    elif action == "social_tg_id":
        response_text = "–í–≤–µ–¥–∏—Ç–µ Telegram ID:"
        state_to_set = SearchState.waiting_for_tgid
    elif action == "social_tg_link":
        response_text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Telegram:"
        state_to_set = SearchState.waiting_for_tg_link
    elif action == "social_ok_id":
        response_text = "–í–≤–µ–¥–∏—Ç–µ OK ID:"
        state_to_set = SearchState.waiting_for_okid
    elif action == "social_fc_id":
        response_text = "–í–≤–µ–¥–∏—Ç–µ FC ID:"
        state_to_set = SearchState.waiting_for_fcid
    
    await callback.message.edit_text(response_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    if state_to_set:
        await state.set_state(state_to_set)

    await callback.answer()

@dp.message(F.text, StateFilter(SearchState.waiting_for_phone, SearchState.waiting_for_email, 
                                SearchState.waiting_for_nickname, SearchState.waiting_for_vkid,
                                SearchState.waiting_for_vk_link, SearchState.waiting_for_tgid,
                                SearchState.waiting_for_tg_link, SearchState.waiting_for_okid,
                                SearchState.waiting_for_fcid))
async def handle_search_query(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    current_state = await state.get_state()
    user_query = message.text.strip()
    
    now = time.time()
    if now - user_last_request[user_id] < FLOOD_LIMIT:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ñ–ª—É–¥–∏—Ç–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É.")
        return
    user_last_request[user_id] = now
    
    is_subscribed = await check_subscription(user_id)
    if not is_subscribed:
        await require_subscription(message)
        await state.set_state(SearchState.choosing_search_type)
        return

    user_data = load_user_data()
    current_count = user_data.get(str(user_id), {}).get("search_count", 0)
    limit = get_user_limit(user_id)
    if current_count >= limit:
        await message.answer(
            "üö´ **–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!**\n\n"
            f"–í–∞—à –ª–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: `{limit}`.\n"
            "–ß—Ç–æ–±—ã —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –ø–æ–ª—É—á–∏—Ç–µ VIP-—Å—Ç–∞—Ç—É—Å.",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    is_valid = False
    query_type = ""
    api_query_value = ""

    if current_state == SearchState.waiting_for_phone:
        query_type = "phone"
        user_query = re.sub(r'[^0-9+]', '', user_query)
        if re.fullmatch(r'^(7|8)?[0-9]{10}$|^380[0-9]{9}$', user_query):
            user_query = "7" + user_query[1:] if user_query.startswith("8") else user_query
            api_query_value = f"+{user_query}"
            is_valid = True
        else:
            await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. (–ù–∞–ø—Ä–∏–º–µ—Ä, `79991234567`)")
            return
    elif current_state == SearchState.waiting_for_email:
        query_type = "email"
        if re.fullmatch(r'[^@]+@[^@]+\.[^@]+', user_query):
            api_query_value = user_query
            is_valid = True
        else:
            await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    elif current_state == SearchState.waiting_for_nickname:
        query_type = "nickname"
        api_query_value = user_query
        is_valid = True
    elif current_state == SearchState.waiting_for_vkid:
        query_type = "vkid"
        if user_query.isdigit():
            api_query_value = f"vkid{user_query}"
            is_valid = True
        else:
            await message.answer("üö´ ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    elif current_state == SearchState.waiting_for_vk_link:
        query_type = "vk.com"
        if "vk.com/" in user_query:
            api_query_value = user_query
            is_valid = True
        else:
            await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `vk.com/`. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    elif current_state == SearchState.waiting_for_tgid:
        query_type = "tgid"
        if user_query.isdigit():
            api_query_value = f"tgid{user_query}"
            is_valid = True
        else:
            await message.answer("üö´ ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    elif current_state == SearchState.waiting_for_tg_link:
        query_type = "t.me"
        if "t.me/" in user_query:
            api_query_value = user_query
            is_valid = True
        else:
            await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `t.me/`. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    elif current_state == SearchState.waiting_for_okid:
        query_type = "okid"
        if user_query.isdigit():
            api_query_value = f"okid{user_query}"
            is_valid = True
        else:
            await message.answer("üö´ ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    elif current_state == SearchState.waiting_for_fcid:
        query_type = "fcid"
        if user_query.isdigit():
            api_query_value = f"fcid{user_query}"
            is_valid = True
        else:
            await message.answer("üö´ ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

    if not is_valid:
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await message.answer("‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1-2 –º–∏–Ω—É—Ç.")
    
    if query_type == "nickname":
        await handle_nickname_search(message, user_query)
        await state.clear()
        return

    try:
        url = f"https://api.depsearch.digital/quest={api_query_value}?token={DEPSEARCH_TOKEN}&lang=ru"

        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get('results'):
                        user_data = load_user_data()
                        user_data[str(user_id)]["search_count"] = user_data.get(str(user_id), {}).get("search_count", 0) + 1
                        user_data[str(user_id)]["queries"].append(
                            {"type": query_type, "value": user_query, "date": str(datetime.now())}
                        )
                        save_user_data(user_data)
                        
                        formatted_response, kb = await format_depsearch_results(query_type, user_query, data, user_id)
                        
                        for part in split_message(formatted_response):
                            await message.answer(part, reply_markup=kb, parse_mode=ParseMode.MARKDOWN)

                    else:
                        await message.answer(f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É `{user_query}` –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode=ParseMode.MARKDOWN)

                elif response.status == 404:
                    await message.answer(f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É `{user_query}` –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode=ParseMode.MARKDOWN)

                elif response.status == 429:
                    await message.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                else:
                    await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ö–æ–¥: {response.status}")
                    logger.error(f"DepSearch API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {response.status}: {await response.text()}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ {query_type} –¥–ª—è {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
    
    await state.clear()

@dp.callback_query(F.data.startswith("full_report|"))
async def send_full_report(callback: types.CallbackQuery):
    cache_key = callback.data.split("|")[1]
    user_id = callback.from_user.id
    
    cached_data = results_cache.get(cache_key)
    
    if cached_data and cached_data["expires"] > datetime.now():
        data = cached_data["data"]
        query_type = cached_data.get("query_type", "unknown")
        query_value = cached_data.get("query_value", "unknown")
        
        try:
            html_content = await generate_html_report(query_type, query_value, data)
            file_name = f"report_{query_type}_{query_value}_{user_id}.html"
            file_path = os.path.join(TEMP_FILES_DIR, file_name)
            
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –∑–∞–ø–∏—Å–∏ –≤ –¥–≤–æ–∏—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
            with open(file_path, "wb") as f:
                f.write(html_content.encode('utf-8'))
            
            await bot.send_document(
                chat_id=user_id,
                document=FSInputFile(file_path, filename=file_name),
                caption=f"**–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É** `{query_value}`",
                parse_mode=ParseMode.MARKDOWN
            )
            os.remove(file_path)
            del results_cache[cache_key]
        except FileNotFoundError:
            await callback.message.answer("‚ùå –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è {user_id}: {e}", exc_info=True)
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        await callback.message.answer("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç—á–µ—Ç–∞ –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")

    await callback.answer()

@dp.callback_query(F.data == "check_subscription")
async def check_subscription_callback_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    is_subscribed = await check_subscription(user_id)
    if is_subscribed:
        await callback.message.edit_text(
            f"‚úÖ **–û—Ç–ª–∏—á–Ω–æ, {callback.from_user.full_name}!**\n"
            "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=None,
            parse_mode=ParseMode.MARKDOWN
        )
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", reply_markup=search_inline_kb)
    else:
        await callback.answer("–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
    await callback.answer()

@dp.message(F.text)
async def handle_text_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥—Ä—É–≥–∏–º —Ö—ç–Ω–¥–ª–µ—Ä–∞–º."""
    await message.answer(
        "üëã **–ü—Ä–∏–≤–µ—Ç!** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ –º–Ω–æ–π.",
        reply_markup=main_kb,
        parse_mode=ParseMode.MARKDOWN
    )
    
async def main() -> None:
    logging.info("Starting bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())